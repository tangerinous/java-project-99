plugins {
	id 'application'
	id 'checkstyle'
	id 'org.springframework.boot' version '3.0.6'
	id 'io.spring.dependency-management' version '1.1.0'
	// Плагины для openapi
	id 'com.github.johnrengelman.processes' version '0.5.0'
    id 'org.springdoc.openapi-gradle-plugin' version '1.6.0'
	id 'org.siouan.frontend-jdk11' version '6.0.0'
}

group = 'hexlet.code'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 20

application {
    mainClass = 'hexlet.code.AppApplication'
}


configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	developmentOnly 'org.springframework.boot:spring-boot-devtools'

	implementation(
			'org.springframework.boot:spring-boot-starter-data-jpa',
			'org.springframework.boot:spring-boot-starter-web',
			'org.springframework.boot:spring-boot-starter-validation',
			'org.springframework.boot:spring-boot-starter-security',
			'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.1.0',
			'io.jsonwebtoken:jjwt:0.9.1',
			'com.rollbar:rollbar-spring-boot3-webmvc:1.10.0',
			'com.querydsl:querydsl-jpa:5.0.0:jakarta',
			'javax.xml.bind:jaxb-api:2.3.1'

	)

	testImplementation(
			'org.springframework.security:spring-security-test',
			'org.springframework.boot:spring-boot-starter-test'
	)

	compileOnly 'org.projectlombok:lombok'

	runtimeOnly (
        'com.h2database:h2',
        'org.postgresql:postgresql:42.6.0'
    )

	annotationProcessor(
			'org.projectlombok:lombok',
			'com.querydsl:querydsl-apt:5.0.0:jakarta',
			'jakarta.persistence:jakarta.persistence-api:3.1.0'
    )
}

tasks.named('test') {
	useJUnitPlatform()
}

compileJava {
    options.release = 20
    options.encoding = 'UTF-8'
}

// Сборка фронтенда.
// Выполняется только если ничего не изменилось.
// *****************************************************************************
frontend {
    nodeVersion = '16.13.1'
 	installScript = 'install'
 	assembleScript = 'run build'
 	packageJsonDirectory = file("${projectDir}/frontend")
}

def configFrontendTasks = {
 	inputs.files(fileTree("$projectDir/frontend").exclude('build', 'node_modules'))
 	outputs.dir("$buildDir/resources/main/static")
}

assembleFrontend {
 	configure configFrontendTasks

 	doLast {
 		copy {
 			from "$projectDir/frontend/build"
 			into "$buildDir/resources/main/static"
 		}
 	}
}

installFrontend {
 	configure configFrontendTasks
}

processResources.dependsOn assembleFrontend
// *****************************************************************************

